На реальних проектах програмісти не користуються такими конструкціями як System.out.println(), замість цього програмісти користуються таким конструкціями як логери. Їх основна перевага в тому, що вони дозволяють уніфікувати вивід в консоль з зазначенням часу, важливості виводу та місця звідки виводиться даний лог.Існують 4 основні рівні важливості виводу і це:

    DEBUG - вивід що несе інформацію важливу для дебагу коду
    INFO - вивід що несе інформацію про загальну роботу застосунку
    WARN - вивід що несе інформацію про не критичні помилки в роботі програми
    ERROR - вивід що несе інформацію про критичні помилки в роботі програми

Логер можна налаштувати так, щоб він показував виключно ті повідомлення, що є важливіші за певний рівень. Для прикладу, якщо режим логера це INFO, то у консоль буде виведено тільки повідомлення з рівнями INFO, WARN і ERROR (не дебаг, оскільки DEBUG нижчий за INFO по важливості)Таким чином пропонуємо вам написати кастомний логер!
Вимоги до логера:

    Створити клас з назвою CustomLogger;
    Створити методи debug, info, warn, error що будуть приймати повідомлення
    Створити статичні змінні
    DEBUG_MODE, INFO_MODE, WARN_MODE, ERROR_MODE передаючи в
    конструктор які можна налаштовувати режим роботи логера
    Також конструктор логера має приймати назву логера
    Формат виводу має бути “час [ім’я логеру] рівень логу : повідомлення“
    Має бути використаний виключно один System.out.println();

Приклад виводу:
Thu Dec 07 11:58:40 EET 2023	[test.b.Main class]	INFO		: info message
Thu Dec 07 11:58:40 EET 2023	[test.b.Main class]	WARN		: warn message
Thu Dec 07 11:58:40 EET 2023	[test.b.Main class]	ERROR	    : error message
Увага! Для виводу дати та часу можна скористатися об'єктом класу Date(new Date())!
Пропоную, стартовий код. Вам потрібно запропонувати частину, яка має бути додана замість “
//PUT YOUR CODE HERE”

public class test.b.Main {
   public static void main(String[] args) {
       CustomLogger customLogger = new CustomLogger("test.b.Main class", CustomLogger.INFO_MODE);

       customLogger.debug("debug message");
       customLogger.info("info message");
       customLogger.warn("warn message");
       customLogger.error("error message");
   }
}

import java.util.Date;

public class CustomLogger {
   //PUT YOUR CODE HERE

}


final int